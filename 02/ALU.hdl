// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here: 202206 bsh
    Mux16(a=x, b[0..15]=false, sel=zx, out=zX); // zx x 0으로
    Mux16(a=y, b[0..15]=false, sel=zy, out=zY); // zy y 0으로
    
    Not16(in=zX, out=nZX); // x 반전
    Not16(in=zY, out=nZY); // y 반전

    Mux16(a=zX, b=nZX, sel=nx, out=nX); // nx sel이 true면 대체
    Mux16(a=zY, b=nZY, sel=ny, out=nY); // ny sel이 true 대체

    And16(a=nX, b=nY, out=andNxy); // f and와 add 구현
    Add16(a=nX, b=nY,out=addNxy);
    Mux16(a=andNxy, b=addNxy, sel=f, out=fout);

    Not16(in=fout, out=nfout); //no에 의한 역전
    Mux16(a=fout, b=nfout, sel=no, out[0..7]=front, out[8..15]=back, out[15]=ng, out=out);
    //out을 여러가지로 쪼개서 받을 수 있음.

    Or8Way(in=front, out=fCheck); // 0 체크
    Or8Way(in=back, out=bCheck);
    Or(a=fCheck, b=bCheck, out=zCheck);
    Mux(a=true, b=false, sel=zCheck, out=zr);


}